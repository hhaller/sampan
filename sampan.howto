/* ----------- postgresql ---------------- */
$ su
$ su postgres
$ createdb sampan
$ psql -s sampan
# create user sampan_admin password '5AM9AN';
# GRANT ALL PRIVILEGES ON DATABASE sampan TO sampan_admin;
# \q
$ createdb sampan_test
$ psql -s sampan_test
# create user sampan_test password 'SAMPAN';
# GRANT ALL PRIVILEGES ON DATABASE sampan_test TO sampan_test;
# GRANT ALL PRIVILEGES ON DATABASE sampan_test TO sampan_admin;
# \q
$ exit
$ exit

/* --------------- RAILS ----------------------- */
rails new sampan
cd sampan

Gemfile: remove sqlite and add postgresql
database.yml: configure database parameters

bundle install
bundle update
rails db:migrate
$ rails test
$ rails s

/* ------------- GIT ---------------------- */
$ git init
$ git add -A
$ git status # give a list of pending updates
$ git commit -m "Initialize Sampan"
$ git remote add origin git@github.com:hhaller/sampan.git
$ git push -u origin --all


/* ---- some changes ------ */
vi app/controllers/application_controller.rb
vi config/routes.rb

/* ----- then ------- */
git commit -am "Add hello"
git push
heroku create
git push heroku master
heroku logs


git checkout -b static-pages
/* -- Switched to a new branch 'static-pages'

/* ----------- generate some static pages
rails g controller StaticPages home help
/* ----------- to destroy same static pages
rails destroy  controller StaticPages home help

/* ---------- generate a model
rails generate model User name:string email:string
/* ---------- destroy the model
rails destroy model User

/* ---------- GIT
$ git add -A
$ git commit -m "Add a Static Pages controller"
$ git push -u origin static-pages
# or simply
$ git push

/* ------------ heroku
git push heroku static-pages:master

/* ---------- more changes
rails g controller StaticPages home help

\du


SELECT d.datname as "database", pg_catalog.pg_get_userbyid(d.datdba) as "Owner" FROM pg_catalog.pg_database d WHERE d.datname = 'sampan_test' ORDER BY 1;

/* ----------- get database & owner ------------------- */
SELECT d.datname as "database", pg_catalog.pg_get_userbyid(d.datdba) as "Owner" FROM pg_catalog.pg_database d;



/* --------------- for / next -------------------- */
git add -A
git commit -m "&&&"
git push
git push heroku static-pages:master



/* ------------ heroku commands   ------------------ */
heroku releases
heroku ps



/* ------------------------------------------------ */
# now would be a good time to commit if you havenâ€™t done so in a while:

$ rails test
$ git add -A
$ git commit -m "Make a basic User model (including secure passwords)"
# Then merge back into the master branch and push to the remote repository:

$ git checkout master
$ git merge modeling-users
$ git push
To get the User model working in production, we need to run the migrations at Heroku, which we can do with heroku run:

$ rails test
$ git push heroku
$ heroku run rails db:migrate
/* ------------------------------------------------- */
